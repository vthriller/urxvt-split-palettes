#use Data::Dumper;

# map rgb tuple (each value ∈ [0; 5]) to ANSI color from the range 16..231
sub rgb {
	$_ = $_[0];
	if(!defined($_)) {
		return undef;
	}
	my ($r, $g, $b) = split //;
	return 16 + 36*$r + 6*$g + $b;
}

# each entry is [fg, bg]
my %palette = ();
sub on_start {
	my ($self) = @_;

	for(my $i = 0; $i < 15; $i++) {
		my $fg = $self->x_resource("%.fg$i");
		my $bg = $self->x_resource("%.bg$i");
		$palette{$i} = [ rgb($fg), rgb($bg) ];
	}

	()
}

sub on_line_update {
	my ($self, $row) = @_;

	my $line = $self->line($row);
	my $rend = $line->r; # line rendition

	#print "-" . Dumper(@{$rend}) if @{$rend};

	@{$rend} = map {
		my $fg = urxvt::GET_BASEFG $_;
		my $bg = urxvt::GET_BASEBG $_;

		# 0, 1 are Color_fg/Color_bg, hence ±2
		if($fg >= 2 && $fg <= 15+2) {
			my $new_fg = $palette{$fg-2}[0];
			if(defined($new_fg)) {
				$fg = $new_fg + 2;
			}
		}
		if($bg >= 2 && $bg <= 15+2) {
			my $new_bg = $palette{$bg-2}[1];
			if(defined($new_bg)) {
				$bg = $new_bg + 2;
			}
		}
		urxvt::SET_COLOR($_, $fg, $bg)
	} @{$rend};

	#print "+" . Dumper(@{$rend}) if @{$rend};

	$line->r($rend);

	()
}
