# urxvt-split-palettes: remaps colors, enabling separate color palettes for foreground and background
# Copyright (C) 2023 vthriller
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#use Data::Dumper;

# parse target color definition
sub parse {
	$_ = $_[0];
	if(!defined($_)) {
		return undef;
	}

	# map "cRGB" (where each R/G/B ∈ [0; 5]) to the color cube values in the 16..231 range
	if(/^c[0-5]{3}$/) {
		my ($tmp, $r, $g, $b) = split //;
		return 16 + 36*$r + 6*$g + $b;
	}

	# map "gN" (N ∈ [1; 24]) to the grayscale colors from the 232..255 range
	if(/^g[1-5]|g1\d|g2[0-4]$/) {
		return 231 + (substr $_, 1);
	}

	# use integer values as-is
	if(/^\d+$/) {
		return +$_;
	}

	warn "split-palettes: unexpected color definition: '$_'\n";
	return undef;
}

# each entry is [fg, bg]
my %palette = ();
sub on_start {
	my ($self) = @_;

	for(my $i = 0; $i < 15; $i++) {
		my $fg = $self->x_resource("%.fg$i");
		my $bg = $self->x_resource("%.bg$i");
		$palette{$i} = [ parse($fg), parse($bg) ];
	}

	()
}

sub on_line_update {
	my ($self, $row) = @_;

	my $line = $self->line($row);
	my $rend = $line->r; # line rendition

	#print "-" . Dumper(@{$rend}) if @{$rend};

	@{$rend} = map {
		my $fg = urxvt::GET_BASEFG $_;
		my $bg = urxvt::GET_BASEBG $_;

		# 0, 1 are Color_fg/Color_bg, hence ±2
		if($fg >= 2 && $fg <= 15+2) {
			my $new_fg = $palette{$fg-2}[0];
			if(defined($new_fg)) {
				$fg = $new_fg + 2;
			}
		}
		if($bg >= 2 && $bg <= 15+2) {
			my $new_bg = $palette{$bg-2}[1];
			if(defined($new_bg)) {
				$bg = $new_bg + 2;
			}
		}
		urxvt::SET_COLOR($_, $fg, $bg)
	} @{$rend};

	#print "+" . Dumper(@{$rend}) if @{$rend};

	$line->r($rend);

	()
}
